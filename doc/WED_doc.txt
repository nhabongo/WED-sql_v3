--manage timeout of open transactions
pg_stat_activity
pg_locks

--advisory locks
table oid = select 'table name'::regclass::oid)::integer
select pg_try_advisory_xact_lock(wid, tgid) (transaction level)

--kill transaction
select pg_terminate_backend(pid)

--condition match
trigger on wed_trig (validate trname) (done)
remove any ';' and single quote before match (done)
remove CREATE, DROP, ALTER, GRANT, REVOKE, SELECT, INSERT, UPDATE, DELETE (done)

--wed_attr
force attr names to lowercase

--optimizations
cache imports on SD global dictionary (unfeasible)
cache cpred
implement trcheck() function to kill a timed out transaction in C (inside bg_worker)
*remove a wed-attribute
parse attribute names from column cpred in wed_trig (to exclude some invalid predicates and to remove an attr from wed_flow table)
force an wed-state to go to an inconsistent wed-state (why ?)
rematch all wed-states in wed_flow table (maybe after inserting new wed-attributes and or new wed-triggers)

--lock mechanism
begin;
select pg_try_advisory_xact_lock(wid,tgid);
update wed_flow set ... where wid=...;
commit;

--features
it is possible to go from one inconsistent state to another inconsistent state

--problems
max number of simultaneous connections (100, lots of ram)

--TODO
create SP to retrive the state of an instance given its wid (ST_STATUS table)
re-run match algorithm in case of modifications on tables WED_attr or WED_trig
create SP to enable/disable wed-attributes
remove delete permission on wed_attr (non admin users)
